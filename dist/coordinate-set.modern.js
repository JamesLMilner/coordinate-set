let t;t=Symbol.iterator;class e{constructor(t){this._size=void 0,this._map=void 0,this._map=new Map,Array.isArray(t)?(t.forEach(t=>{this._validateCoordinate(t),this._map.set(this._getKey(t),t)}),this._size=t.length):t instanceof e?(t.forEach(t=>{this._map.set(this._getKey(t),t)}),this._size=t.size):this._size=0}_getKey(t){return`${t[0]},${t[1]}`}_validateCoordinate([t,e]){if(!("number"==typeof t&&!isNaN(t)&&t>=-180&&t<=180))throw new Error("Longitude must be valid");if(!("number"==typeof e&&!isNaN(e)&&e>=-90&&e<=90))throw new Error("Latitude must be valid")}*[t](){for(let t of this._map.entries())yield[t[1],t[1]]}entries(){return this[Symbol.iterator]()}forEach(t){[...this.entries()].forEach((e,i)=>{t(e[0],i,this)})}get size(){return this._size}set size(t){}has(t){return this._validateCoordinate(t),Boolean(this._map.get(this._getKey(t)))}add(t){this._validateCoordinate(t);const e=this._getKey(t);if(!this._map.get(e))return this._size++,this._map.set(e,t),this}delete(t){this._validateCoordinate(t);const e=this._getKey(t);return!!this._map.get(e)&&(this._size--,this._map.delete(e))}clear(){this._map=new Map,this._size=0}}export{e as CoordinateSet};
//# sourceMappingURL=coordinate-set.modern.js.map
